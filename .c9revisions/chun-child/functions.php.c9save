{"ts":1368663183594,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\r\n/**\r\n * This is your child theme functions file.  In general, most PHP customizations should be placed within this\r\n * file.  Sometimes, you may have to overwrite a template file.  However, you should consult the theme \r\n * documentation and support forums before making a decision.  In most cases, what you want to accomplish\r\n * can be done from this file alone.  This isn't a foreign practice introduced by parent/child themes.  This is\r\n * how WordPress works.  By utilizing the functions.php file, you are both future-proofing your site and using\r\n * a general best practice for coding.\r\n *\r\n * All style/design changes should take place within your style.css file, not this one.\r\n *\r\n * The functions file can be your best friend or your worst enemy.  Always double-check your code to make\r\n * sure that you close everything that you open and that it works before uploading it to a live site.\r\n *\r\n * @package ChunChild\r\n * @subpackage Functions\r\n */\r\n\r\n/* Add the child theme setup function to the 'after_setup_theme' hook. */\r\nadd_action( 'after_setup_theme', 'chun_child_theme_setup', 11 );\r\n\r\n/**\r\n * Setup function.  All child themes should run their setup within this function.  The idea is to add/remove \r\n * filters and actions after the parent theme has been set up.  This function provides you that opportunity.\r\n *\r\n * @since 0.1.0\r\n */\r\nfunction chun_child_theme_setup() {\r\n\r\n\t/* Get the theme prefix (\"chun\"). */\r\n\t$prefix = hybrid_get_prefix();\r\n\r\n\t/* Example action. */\r\n\t// add_action( \"{$prefix}_header\", 'chun_child_example_action' );\r\n\r\n\t/* Example filter. */\r\n\t// add_filter( \"{$prefix}_site_title\", 'chun_child_example_filter' );\r\n\r\n}\r\n\r\n?>"]],"start1":0,"start2":0,"length1":0,"length2":1674}]],"length":1674}
